// Generated by CoffeeScript 1.6.3
var Pivot, TestClass, coffee, count_attributes, should;

should = (require('chai')).should();

coffee = require('coffee-script');

Pivot = require('../../src/index');

TestClass = (function() {
  function TestClass() {}

  TestClass.prototype.param_1 = "one";

  TestClass.prototype.param_2 = "two";

  TestClass.prototype.instance_method = function() {};

  TestClass.class_method = function() {};

  return TestClass;

})();

count_attributes = function(obj) {
  var count, k;
  count = 0;
  for (k in obj) {
    count++;
  }
  return count;
};

exports.test = function(pivot) {
  var foofunk, listener;
  foofunk = function() {};
  listener = {};
  describe('[key-> value storage]', function() {
    it('it should store a value', function(done) {
      pivot.set('key', 'value');
      return done();
    });
    return it('it should retrieve a value', function(done) {
      (pivot.get('key')).should.equal('value');
      return done();
    });
  });
  describe('[event system]', function() {
    it('it should register an event', function(done) {
      pivot.on('event', function() {});
      return done();
    });
    it('it should propagate an event', function(done) {
      pivot.on('changed:name', foofunk);
      pivot.on('changed:name', function() {
        return done();
      });
      return pivot.trigger('changed:name', 'foo');
    });
    return it('it should unregister event', function(done) {
      pivot.off('changed:name', foofunk).should.equal(true);
      return done();
    });
  });
  return describe('[include/extend]', function() {
    it('it should create a TestClass instance', function(done) {
      var instance;
      instance = new TestClass;
      instance.param_1.should.equal("one");
      return done();
    });
    it('it should include Pivot instance methods in a TestClass instance', function(done) {
      var attr_instance, attr_instance_2, instance, instance_2;
      instance = new TestClass;
      attr_instance = count_attributes(instance);
      Pivot.include(TestClass);
      instance_2 = new TestClass;
      attr_instance_2 = count_attributes(instance_2);
      attr_instance_2.should.equal(attr_instance + count_attributes(pivot));
      return done();
    });
    return it('it should extend Pivot class methods with TestClass class methods', function(done) {
      var new_pivot_count, pivot_count, test_count;
      pivot_count = count_attributes(Pivot);
      test_count = count_attributes(TestClass);
      Pivot.extend(TestClass);
      new_pivot_count = count_attributes(Pivot);
      new_pivot_count.should.equal(pivot_count + test_count);
      return done();
    });
  });
};
